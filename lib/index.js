"use strict";

var _moment = require("moment");

var _moment2 = _interopRequireDefault(_moment);

var _lodash = require("lodash");

var _commander = require("commander");

var _safe = require("colors/safe");

var _safe2 = _interopRequireDefault(_safe);

var _package = require("../package.json");

var _package2 = _interopRequireDefault(_package);

var _upgradeRequest = require("./upgrade-request");

var _upgradeRequest2 = _interopRequireDefault(_upgradeRequest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let cmd = new _commander.Command(_package2.default.name);
let defaultPrefix = "yarn-upgrade/";
cmd.version(_package2.default.version).description(_package2.default.description).option("-n, --username <username>", "specify the commit auther name. You may set GIT_USER_NAME to environment variable.", process.env.GIT_USER_NAME).option("-e, --useremail <useremail>", "specify the commit auther email. You may set GIT_USER_EMAIL to environment variable.", process.env.GIT_USER_EMAIL).option("-t, --token <token>", "specify personal access token for GitHub. use only for debugging purpose. You should set GITHUB_ACCESS_TOKEN to environment variable.", process.env.GITHUB_ACCESS_TOKEN).option("--execute", "if you don't specify this option, allows you to test this application.", false).option("-L, --latest", "if you specify this option, upgrades packages ignores the version range specified in package.json", false).option("-v, --verbose", `shows details about the running ${_package2.default.name}`, false).option("-k, --keep", "if you specify this option, keep working branch after all.", false).option("--prefix <prefix>", `specify working branch prefix. default prefix is "${defaultPrefix}"`, defaultPrefix).option("--workingdir <path>", `specify project root dir. it contains package.json. default path is ${process.cwd()}`, process.cwd()).option("--with-shadows", "if you specify this option, shows shadow dependencies changes.", false).option("--bitbucket", "if you specify this option, pull request will be created on bitbucket", false).parse(process.argv);

/* eslint-disable no-console */
if (cmd.username && cmd.useremail && cmd.token) {
    cmd.now = (0, _moment2.default)().format("YYYYMMDDhhmmss");
    cmd.logger = cmd.verbose ? m => console.log(`> ${m}`) : () => {};
    Promise.all([(0, _upgradeRequest2.default)(cmd)]).then(([msg]) => {
        msg && console.log(msg);
        cmd.logger("All done!!");
    }).catch(err => {
        if ((0, _lodash.isString)(err)) {
            console.log(err);
        } else {
            console.error(err);
            process.exit(1);
        }
    });
} else {
    console.log(_safe2.default.red("Please set required parameters: username, useremail, token"));
    cmd.help();
}
/* eslint-enable no-console */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjbWQiLCJDb21tYW5kIiwicGtnIiwibmFtZSIsImRlZmF1bHRQcmVmaXgiLCJ2ZXJzaW9uIiwiZGVzY3JpcHRpb24iLCJvcHRpb24iLCJwcm9jZXNzIiwiZW52IiwiR0lUX1VTRVJfTkFNRSIsIkdJVF9VU0VSX0VNQUlMIiwiR0lUSFVCX0FDQ0VTU19UT0tFTiIsImN3ZCIsInBhcnNlIiwiYXJndiIsInVzZXJuYW1lIiwidXNlcmVtYWlsIiwidG9rZW4iLCJub3ciLCJmb3JtYXQiLCJsb2dnZXIiLCJ2ZXJib3NlIiwibSIsImNvbnNvbGUiLCJsb2ciLCJQcm9taXNlIiwiYWxsIiwidGhlbiIsIm1zZyIsImNhdGNoIiwiZXJyIiwiZXJyb3IiLCJleGl0IiwiY29sb3JzIiwicmVkIiwiaGVscCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBSUEsTUFBTSxJQUFJQyxrQkFBSixDQUFZQyxrQkFBSUMsSUFBaEIsQ0FBVjtBQUNBLElBQUlDLGdCQUFnQixlQUFwQjtBQUNBSixJQUFJSyxPQUFKLENBQVlILGtCQUFJRyxPQUFoQixFQUNLQyxXQURMLENBQ2lCSixrQkFBSUksV0FEckIsRUFFS0MsTUFGTCxDQUVZLDJCQUZaLEVBRXlDLG9GQUZ6QyxFQUUrSEMsUUFBUUMsR0FBUixDQUFZQyxhQUYzSSxFQUdLSCxNQUhMLENBR1ksNkJBSFosRUFHMkMsc0ZBSDNDLEVBR21JQyxRQUFRQyxHQUFSLENBQVlFLGNBSC9JLEVBSUtKLE1BSkwsQ0FJWSxxQkFKWixFQUltQyx1SUFKbkMsRUFJNEtDLFFBQVFDLEdBQVIsQ0FBWUcsbUJBSnhMLEVBS0tMLE1BTEwsQ0FLWSxXQUxaLEVBS3lCLHdFQUx6QixFQUttRyxLQUxuRyxFQU1LQSxNQU5MLENBTVksY0FOWixFQU00QixtR0FONUIsRUFNaUksS0FOakksRUFPS0EsTUFQTCxDQU9ZLGVBUFosRUFPOEIsbUNBQWtDTCxrQkFBSUMsSUFBSyxFQVB6RSxFQU80RSxLQVA1RSxFQVFLSSxNQVJMLENBUVksWUFSWixFQVEwQiw0REFSMUIsRUFRd0YsS0FSeEYsRUFTS0EsTUFUTCxDQVNZLG1CQVRaLEVBU2tDLHFEQUFvREgsYUFBYyxHQVRwRyxFQVN3R0EsYUFUeEcsRUFVS0csTUFWTCxDQVVZLHFCQVZaLEVBVW9DLHVFQUFzRUMsUUFBUUssR0FBUixFQUFjLEVBVnhILEVBVTJITCxRQUFRSyxHQUFSLEVBVjNILEVBV0tOLE1BWEwsQ0FXWSxnQkFYWixFQVc4QixnRUFYOUIsRUFXZ0csS0FYaEcsRUFZS0EsTUFaTCxDQVlZLGFBWlosRUFZMkIsdUVBWjNCLEVBWW9HLEtBWnBHLEVBYUtPLEtBYkwsQ0FhV04sUUFBUU8sSUFibkI7O0FBZUE7QUFDQSxJQUFJZixJQUFJZ0IsUUFBSixJQUFnQmhCLElBQUlpQixTQUFwQixJQUFpQ2pCLElBQUlrQixLQUF6QyxFQUFnRDtBQUM1Q2xCLFFBQUltQixHQUFKLEdBQVUsd0JBQVNDLE1BQVQsQ0FBZ0IsZ0JBQWhCLENBQVY7QUFDQXBCLFFBQUlxQixNQUFKLEdBQWFyQixJQUFJc0IsT0FBSixHQUFjQyxLQUFLQyxRQUFRQyxHQUFSLENBQWEsS0FBSUYsQ0FBRSxFQUFuQixDQUFuQixHQUEyQyxNQUFNLENBQUcsQ0FBakU7QUFDQUcsWUFBUUMsR0FBUixDQUFZLENBQUMsOEJBQUczQixHQUFILENBQUQsQ0FBWixFQUNLNEIsSUFETCxDQUNVLENBQUMsQ0FBQ0MsR0FBRCxDQUFELEtBQVc7QUFDYkEsZUFBT0wsUUFBUUMsR0FBUixDQUFZSSxHQUFaLENBQVA7QUFDQTdCLFlBQUlxQixNQUFKLENBQVcsWUFBWDtBQUNILEtBSkwsRUFLS1MsS0FMTCxDQUtZQyxHQUFELElBQVM7QUFDWixZQUFJLHNCQUFTQSxHQUFULENBQUosRUFBbUI7QUFDZlAsb0JBQVFDLEdBQVIsQ0FBWU0sR0FBWjtBQUNILFNBRkQsTUFFTztBQUNIUCxvQkFBUVEsS0FBUixDQUFjRCxHQUFkO0FBQ0F2QixvQkFBUXlCLElBQVIsQ0FBYSxDQUFiO0FBQ0g7QUFDSixLQVpMO0FBYUgsQ0FoQkQsTUFnQk87QUFDSFQsWUFBUUMsR0FBUixDQUFZUyxlQUFPQyxHQUFQLENBQVcsNERBQVgsQ0FBWjtBQUNBbkMsUUFBSW9DLElBQUo7QUFDSDtBQUNEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCJsb2Rhc2hcIjtcbmltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwiY29tbWFuZGVyXCI7XG5pbXBvcnQgY29sb3JzIGZyb20gXCJjb2xvcnMvc2FmZVwiO1xuXG5pbXBvcnQgcGtnIGZyb20gXCIuLi9wYWNrYWdlLmpzb25cIjtcbmltcG9ydCB1ciBmcm9tIFwiLi91cGdyYWRlLXJlcXVlc3RcIjtcblxubGV0IGNtZCA9IG5ldyBDb21tYW5kKHBrZy5uYW1lKTtcbmxldCBkZWZhdWx0UHJlZml4ID0gXCJ5YXJuLXVwZ3JhZGUvXCI7XG5jbWQudmVyc2lvbihwa2cudmVyc2lvbilcbiAgICAuZGVzY3JpcHRpb24ocGtnLmRlc2NyaXB0aW9uKVxuICAgIC5vcHRpb24oXCItbiwgLS11c2VybmFtZSA8dXNlcm5hbWU+XCIsIFwic3BlY2lmeSB0aGUgY29tbWl0IGF1dGhlciBuYW1lLiBZb3UgbWF5IHNldCBHSVRfVVNFUl9OQU1FIHRvIGVudmlyb25tZW50IHZhcmlhYmxlLlwiLCBwcm9jZXNzLmVudi5HSVRfVVNFUl9OQU1FKVxuICAgIC5vcHRpb24oXCItZSwgLS11c2VyZW1haWwgPHVzZXJlbWFpbD5cIiwgXCJzcGVjaWZ5IHRoZSBjb21taXQgYXV0aGVyIGVtYWlsLiBZb3UgbWF5IHNldCBHSVRfVVNFUl9FTUFJTCB0byBlbnZpcm9ubWVudCB2YXJpYWJsZS5cIiwgcHJvY2Vzcy5lbnYuR0lUX1VTRVJfRU1BSUwpXG4gICAgLm9wdGlvbihcIi10LCAtLXRva2VuIDx0b2tlbj5cIiwgXCJzcGVjaWZ5IHBlcnNvbmFsIGFjY2VzcyB0b2tlbiBmb3IgR2l0SHViLiB1c2Ugb25seSBmb3IgZGVidWdnaW5nIHB1cnBvc2UuIFlvdSBzaG91bGQgc2V0IEdJVEhVQl9BQ0NFU1NfVE9LRU4gdG8gZW52aXJvbm1lbnQgdmFyaWFibGUuXCIsIHByb2Nlc3MuZW52LkdJVEhVQl9BQ0NFU1NfVE9LRU4pXG4gICAgLm9wdGlvbihcIi0tZXhlY3V0ZVwiLCBcImlmIHlvdSBkb24ndCBzcGVjaWZ5IHRoaXMgb3B0aW9uLCBhbGxvd3MgeW91IHRvIHRlc3QgdGhpcyBhcHBsaWNhdGlvbi5cIiwgZmFsc2UpXG4gICAgLm9wdGlvbihcIi1MLCAtLWxhdGVzdFwiLCBcImlmIHlvdSBzcGVjaWZ5IHRoaXMgb3B0aW9uLCB1cGdyYWRlcyBwYWNrYWdlcyBpZ25vcmVzIHRoZSB2ZXJzaW9uIHJhbmdlIHNwZWNpZmllZCBpbiBwYWNrYWdlLmpzb25cIiwgZmFsc2UpXG4gICAgLm9wdGlvbihcIi12LCAtLXZlcmJvc2VcIiwgYHNob3dzIGRldGFpbHMgYWJvdXQgdGhlIHJ1bm5pbmcgJHtwa2cubmFtZX1gLCBmYWxzZSlcbiAgICAub3B0aW9uKFwiLWssIC0ta2VlcFwiLCBcImlmIHlvdSBzcGVjaWZ5IHRoaXMgb3B0aW9uLCBrZWVwIHdvcmtpbmcgYnJhbmNoIGFmdGVyIGFsbC5cIiwgZmFsc2UpXG4gICAgLm9wdGlvbihcIi0tcHJlZml4IDxwcmVmaXg+XCIsIGBzcGVjaWZ5IHdvcmtpbmcgYnJhbmNoIHByZWZpeC4gZGVmYXVsdCBwcmVmaXggaXMgXCIke2RlZmF1bHRQcmVmaXh9XCJgLCBkZWZhdWx0UHJlZml4KVxuICAgIC5vcHRpb24oXCItLXdvcmtpbmdkaXIgPHBhdGg+XCIsIGBzcGVjaWZ5IHByb2plY3Qgcm9vdCBkaXIuIGl0IGNvbnRhaW5zIHBhY2thZ2UuanNvbi4gZGVmYXVsdCBwYXRoIGlzICR7cHJvY2Vzcy5jd2QoKX1gLCBwcm9jZXNzLmN3ZCgpKVxuICAgIC5vcHRpb24oXCItLXdpdGgtc2hhZG93c1wiLCBcImlmIHlvdSBzcGVjaWZ5IHRoaXMgb3B0aW9uLCBzaG93cyBzaGFkb3cgZGVwZW5kZW5jaWVzIGNoYW5nZXMuXCIsIGZhbHNlKVxuICAgIC5vcHRpb24oXCItLWJpdGJ1Y2tldFwiLCBcImlmIHlvdSBzcGVjaWZ5IHRoaXMgb3B0aW9uLCBwdWxsIHJlcXVlc3Qgd2lsbCBiZSBjcmVhdGVkIG9uIGJpdGJ1Y2tldFwiLCBmYWxzZSlcbiAgICAucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuaWYgKGNtZC51c2VybmFtZSAmJiBjbWQudXNlcmVtYWlsICYmIGNtZC50b2tlbikge1xuICAgIGNtZC5ub3cgPSBtb21lbnQoKS5mb3JtYXQoXCJZWVlZTU1ERGhobW1zc1wiKTtcbiAgICBjbWQubG9nZ2VyID0gY21kLnZlcmJvc2UgPyBtID0+IGNvbnNvbGUubG9nKGA+ICR7bX1gKSA6ICgpID0+IHsgfTtcbiAgICBQcm9taXNlLmFsbChbdXIoY21kKV0pXG4gICAgICAgIC50aGVuKChbbXNnXSkgPT4ge1xuICAgICAgICAgICAgbXNnICYmIGNvbnNvbGUubG9nKG1zZyk7XG4gICAgICAgICAgICBjbWQubG9nZ2VyKFwiQWxsIGRvbmUhIVwiKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhlcnIpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZXhpdCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59IGVsc2Uge1xuICAgIGNvbnNvbGUubG9nKGNvbG9ycy5yZWQoXCJQbGVhc2Ugc2V0IHJlcXVpcmVkIHBhcmFtZXRlcnM6IHVzZXJuYW1lLCB1c2VyZW1haWwsIHRva2VuXCIpKTtcbiAgICBjbWQuaGVscCgpO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4iXX0=